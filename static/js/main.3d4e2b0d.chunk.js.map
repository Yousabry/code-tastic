{"version":3,"sources":["IPerson.ts","FilterDefaultValue.ts","FilterCodeEditor.tsx","SortingDefault.ts","SortFuncCodeEditor.tsx","InfoTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["IPersonInterFaceAsString","defaultFilter","person","FilterStartFlag","DefaultFilterCodeAsString","FilterCodeEditor","props","closePopover","setState","editPopoverOpen","getCleanCode","s","state","unsavedCode","i","indexOf","slice","length","saveAndClose","newFunction","Function","onSave","err","console","error","showError","cancelAndClose","code","darkMode","Button","variant","onClick","this","buttonName","Modal","size","show","onHide","dialogClassName","Header","Title","Body","height","defaultLanguage","theme","defaultValue","onChange","newVal","Footer","disabled","React","defaultSortingFunc","p1","p2","age","SortFuncStartFlag","DefaultSortFuncAsString","SortCodeEditor","InfoTable","getFilteredList","data","filter","filterFunc","getSortedList","currentList","myList","showFilterError","sort","sorterFunc","showSortError","Table","striped","bordered","hover","map","_id","isActive","balance","eyeColor","name","gender","App","onSaveFilterCode","newCode","savedFilterCode","forceUpdate","alert","onSaveSortingCode","sortingFunc","savedSortingCode","className","Component","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"y/FAWaA,EAAgC,8JCT9B,SAASC,EAAcC,GAElC,OAAO,EAGJ,IAAMC,EAA0B,mDAE1BC,EAAiC,UAAMJ,EAAN,gBAAsCG,EAAtC,iD,OCHjCE,EAAb,kDAIE,WAAYC,GAA+B,IAAD,8BACxC,cAAMA,IAQRC,aAAe,WACb,EAAKC,SAAS,CAAEC,iBAAiB,KAVO,EAa1CC,aAAe,WACb,IAAIC,EAAY,EAAKC,MAAMC,YAEvBC,EAAYH,EAAEI,QAAQZ,GAK1B,OAFAQ,GADAA,EAAIA,EAAEK,MAAMF,EAAIX,EAAgBc,SAC1BD,MAAM,GAAI,IAnBwB,EAwB1CE,aAAe,WACb,IAEE,IAAIC,EAAmB,IAAIC,SAAS,SAAU,EAAKV,gBAEnD,EAAKJ,MAAMe,OAAO,EAAKT,MAAMC,YAAaM,GAC1C,MAAOG,GACPC,QAAQC,MAAMF,GACd,EAAKhB,MAAMmB,YAGb,EAAKlB,gBAnCmC,EAsC1CmB,eAAiB,WAEf,EAAKlB,SAAS,CAAEK,YAAa,EAAKP,MAAMqB,OACxC,EAAKpB,gBAvCL,EAAKK,MAAQ,CACXgB,UAAU,EACVf,YAAa,EAAKP,MAAMqB,KACxBlB,iBAAiB,GALqB,EAJ5C,0CAgDE,WAAU,IAAD,OACP,OACE,qCACE,cAACoB,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAS,kBAAM,EAAKvB,SAAS,CAAEC,iBAAiB,KAFlD,SAIGuB,KAAK1B,MAAM2B,aAEbD,KAAKpB,MAAMH,iBACV,eAACyB,EAAA,EAAD,CACEC,KAAK,KACLC,MAAM,EACNC,OAAQL,KAAKzB,aACb+B,gBAAgB,UAJlB,UAME,cAACJ,EAAA,EAAMK,OAAP,UACE,cAACL,EAAA,EAAMM,MAAP,UAAcR,KAAK1B,MAAM2B,eAE3B,cAACC,EAAA,EAAMO,KAAP,UACE,cAAC,IAAD,CACEC,OAAO,QACPC,gBAAgB,aAChBC,MAAOZ,KAAKpB,MAAMgB,SAAW,UAAY,QACzCiB,aAAcb,KAAK1B,MAAMqB,KACzBmB,SAAU,SAACC,GACT,EAAKvC,SAAS,CAAEK,YAAakC,GAAU,UAI7C,eAACb,EAAA,EAAMc,OAAP,WACE,cAACnB,EAAA,EAAD,CACEC,QAAQ,UACRC,QAASC,KAAKd,aACd+B,SAAUjB,KAAK1B,MAAMqB,OAASK,KAAKpB,MAAMC,YAH3C,kBAOA,cAACgB,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAASC,KAAKN,eAAvC,iCAtFd,GAAsCwB,aCJvB,SAASC,EAAmBC,EAAaC,GAEpD,OAAOD,EAAGE,IAAMD,EAAGC,IAGhB,IAAMC,EAA4B,mEAE5BC,EAA+B,UAAMxD,EAAN,gBAAsCuD,EAAtC,4DCH/BE,EAAb,kDAIE,WAAYnD,GAA6B,IAAD,8BACtC,cAAMA,IAQRC,aAAe,WACb,EAAKC,SAAS,CAAEC,iBAAiB,KAVK,EAaxCC,aAAe,WACb,IAAIC,EAAY,EAAKC,MAAMC,YAEvBC,EAAYH,EAAEI,QAAQwC,GAK1B,OAFA5C,GADAA,EAAIA,EAAEK,MAAMF,EAAIyC,EAAkBtC,SAC5BD,MAAM,GAAI,IAnBsB,EAwBxCE,aAAe,WACb,IAEE,IAAIC,EAAmB,IAAIC,SAAS,KAAM,KAAM,EAAKV,gBAErD,EAAKJ,MAAMe,OAAO,EAAKT,MAAMC,YAAaM,GAC1C,MAAOG,GACPC,QAAQC,MAAMF,GACd,EAAKhB,MAAMmB,YAGb,EAAKlB,gBAnCiC,EAsCxCmB,eAAiB,WAEf,EAAKlB,SAAS,CAAEK,YAAa,EAAKP,MAAMqB,OACxC,EAAKpB,gBAvCL,EAAKK,MAAQ,CACXgB,UAAU,EACVf,YAAa,EAAKP,MAAMqB,KACxBlB,iBAAiB,GALmB,EAJ1C,0CAgDE,WAAU,IAAD,OACP,OACE,qCACE,cAACoB,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAS,kBAAM,EAAKvB,SAAS,CAAEC,iBAAiB,KAFlD,SAIGuB,KAAK1B,MAAM2B,aAEbD,KAAKpB,MAAMH,iBACV,eAACyB,EAAA,EAAD,CACEC,KAAK,KACLC,MAAM,EACNC,OAAQL,KAAKzB,aACb+B,gBAAgB,UAJlB,UAME,cAACJ,EAAA,EAAMK,OAAP,UACE,cAACL,EAAA,EAAMM,MAAP,UAAcR,KAAK1B,MAAM2B,eAE3B,cAACC,EAAA,EAAMO,KAAP,UACE,cAAC,IAAD,CACEC,OAAO,QACPC,gBAAgB,aAChBC,MAAOZ,KAAKpB,MAAMgB,SAAW,UAAY,QACzCiB,aAAcb,KAAK1B,MAAMqB,KACzBmB,SAAU,SAACC,GACT,EAAKvC,SAAS,CAAEK,YAAakC,GAAU,UAI7C,eAACb,EAAA,EAAMc,OAAP,WACE,cAACnB,EAAA,EAAD,CACEC,QAAQ,UACRC,QAASC,KAAKd,aACd+B,SAAUjB,KAAK1B,MAAMqB,OAASK,KAAKpB,MAAMC,YAH3C,kBAOA,cAACgB,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAASC,KAAKN,eAAvC,iCAtFd,GAAoCwB,a,gBCDvBQ,EAAb,kDACE,WAAYpD,GAAwB,IAAD,8BACjC,cAAMA,IAMRqD,gBAAkB,WAChB,OAAOC,EAAKC,OAAO,EAAKvD,MAAMwD,aARG,EAWnCC,cAAgB,WACd,OAAOH,EAAKC,OAAO,EAAKvD,MAAMwD,aAV9B,EAAKlD,MAAQ,CACXoD,YAAaJ,GAHkB,EADrC,0CAgBE,WAEE,IAAIK,EAAoBL,EAGxB,IACEK,EAASjC,KAAK2B,kBACd,MAAOrC,GACPC,QAAQC,MAAMF,GACdU,KAAK1B,MAAM4D,kBAIb,IACED,EAASA,EAAOE,KAAKnC,KAAK1B,MAAM8D,YAChC,MAAO9C,GACPC,QAAQC,MAAMF,GACdU,KAAK1B,MAAM+D,gBAGb,OACE,eAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAAC3C,QAAQ,OAAtC,UACE,gCACE,+BACE,oCACA,wCACA,yCACA,qCACA,2CACA,sCACA,6CAGJ,gCACGmC,EAAOS,KAAI,SAACxE,GACX,OACE,+BACE,6BAAKA,EAAOyE,MACZ,6BAAKzE,EAAO0E,SAAW,MAAQ,OAC/B,6BAAK1E,EAAO2E,UACZ,6BAAK3E,EAAOoD,MACZ,6BAAKpD,EAAO4E,WACZ,6BAAK5E,EAAO6E,OACZ,6BAAK7E,EAAO8E,WAPL9E,EAAOyE,iBApD9B,GAA+BzB,aCKV+B,E,kDACnB,WAAY3E,GAAkB,IAAD,8BAC3B,cAAMA,IASR4E,iBAAmB,SACjBC,EACArB,GAEA,EAAKtD,SAAS,CAAE4E,gBAAiBD,EAASrB,WAAYA,IAEtD,EAAKuB,eAhBsB,EAmB7BnB,gBAAkB,WAChBoB,MAAM,iBApBqB,EAuB7BjB,cAAgB,WACdiB,MAAM,eAxBqB,EA2B7BC,kBAAoB,SAClBJ,EACAK,GAEA,EAAKhF,SAAS,CAAEiF,iBAAkBN,EAASK,YAAaA,IAExD,EAAKH,eA/BL,EAAKzE,MAAQ,CACXkD,WAAY7D,EACZuF,YAAarC,EACbiC,gBAAiBhF,EACjBqF,iBAAkBjC,GANO,E,0CAoC7B,WACE,OACE,sBAAKkC,UAAU,MAAf,UACE,8CACA,iEAEA,cAAC,EAAD,CACE/D,KAAMK,KAAKpB,MAAMwE,gBACjB/D,OAAQW,KAAKkD,iBACbjD,WAAW,cACXR,UAAWO,KAAKkC,kBAGlB,cAAC,EAAD,CACEvC,KAAMK,KAAKpB,MAAM6E,iBACjBpE,OAAQW,KAAKuD,kBACbtD,WAAW,kBACXR,UAAWO,KAAKqC,gBAGlB,cAAC,EAAD,CACEP,WAAY9B,KAAKpB,MAAMkD,WACvBM,WAAYpC,KAAKpB,MAAM4E,YACvBtB,gBAAiBlC,KAAKkC,gBACtBG,cAAerC,KAAKqC,uB,GA7DGnB,IAAMyC,WCIxBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBzE,UACxC,6BAAqB0E,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3d4e2b0d.chunk.js","sourcesContent":["\r\nexport interface IPerson {\r\n    _id: string;\r\n    isActive: boolean;\r\n    balance: number;\r\n    age: number;\r\n    eyeColor: string;\r\n    name: string;\r\n    gender: string;\r\n  }\r\n\r\nexport const IPersonInterFaceAsString: string = `\r\ninterface IPerson {\r\n  _id: string;\r\n  isActive: boolean;\r\n  balance: number;\r\n  age: number;\r\n  eyeColor: string;\r\n  name: string;\r\n  gender: string;\r\n}`;","import { IPerson, IPersonInterFaceAsString } from \"./IPerson\";\r\n\r\nexport default function defaultFilter(person: IPerson): boolean{\r\n    // Put your code here\r\n    return true;\r\n}\r\n\r\nexport const FilterStartFlag: string = \"function filterFunc(person: IPerson): boolean{\\n\";\r\n\r\nexport const DefaultFilterCodeAsString: string = `${IPersonInterFaceAsString}\\n\\n ${FilterStartFlag}\\t// Put your code here...\\n\\treturn true;\\n}`;\r\n","import * as React from \"react\";\r\nimport Editor from \"@monaco-editor/react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport { IPerson } from \"./IPerson\";\r\nimport { FilterStartFlag } from \"./FilterDefaultValue\";\r\n\r\nexport class FilterCodeEditor extends React.Component<\r\n  FilterCodeEditorProps,\r\n  FilterCodeEditorState\r\n> {\r\n  constructor(props: FilterCodeEditorProps) {\r\n    super(props);\r\n    this.state = {\r\n      darkMode: false,\r\n      unsavedCode: this.props.code,\r\n      editPopoverOpen: false,\r\n    };\r\n  }\r\n\r\n  closePopover = () => {\r\n    this.setState({ editPopoverOpen: false });\r\n  };\r\n\r\n  getCleanCode = (): string => {\r\n    let s: string = this.state.unsavedCode;\r\n\r\n    let i: number = s.indexOf(FilterStartFlag);\r\n\r\n    s = s.slice(i + FilterStartFlag.length);\r\n    s = s.slice(0, -1);\r\n\r\n    return s;\r\n  };\r\n\r\n  saveAndClose = () => {\r\n    try {\r\n      // update function in parent\r\n      let newFunction: any = new Function(\"person\", this.getCleanCode());\r\n\r\n      this.props.onSave(this.state.unsavedCode, newFunction);\r\n    } catch (err) {\r\n      console.error(err);\r\n      this.props.showError();\r\n    }\r\n\r\n    this.closePopover();\r\n  };\r\n\r\n  cancelAndClose = () => {\r\n    // delete changes\r\n    this.setState({ unsavedCode: this.props.code });\r\n    this.closePopover();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Button\r\n          variant=\"primary\"\r\n          onClick={() => this.setState({ editPopoverOpen: true })}\r\n        >\r\n          {this.props.buttonName}\r\n        </Button>\r\n        {this.state.editPopoverOpen && (\r\n          <Modal\r\n            size=\"xl\"\r\n            show={true}\r\n            onHide={this.closePopover}\r\n            dialogClassName=\"Popover\"\r\n          >\r\n            <Modal.Header>\r\n              <Modal.Title>{this.props.buttonName}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <Editor\r\n                height=\"400px\"\r\n                defaultLanguage=\"typescript\"\r\n                theme={this.state.darkMode ? \"vs-dark\" : \"light\"}\r\n                defaultValue={this.props.code}\r\n                onChange={(newVal: string | undefined) => {\r\n                  this.setState({ unsavedCode: newVal || \"\" });\r\n                }}\r\n              />\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button\r\n                variant=\"primary\"\r\n                onClick={this.saveAndClose}\r\n                disabled={this.props.code === this.state.unsavedCode}\r\n              >\r\n                Save\r\n              </Button>\r\n              <Button variant=\"danger\" onClick={this.cancelAndClose}>\r\n                Cancel\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport interface FilterCodeEditorProps {\r\n  buttonName: string;\r\n  code: string;\r\n  onSave: (newCode: string, f: (person: IPerson) => boolean) => void;\r\n  showError: () => void;\r\n}\r\n\r\nexport interface FilterCodeEditorState {\r\n  darkMode: boolean;\r\n  unsavedCode: string;\r\n  editPopoverOpen: boolean;\r\n}\r\n","import { IPerson, IPersonInterFaceAsString } from \"./IPerson\";\r\n\r\nexport default function defaultSortingFunc(p1: IPerson, p2: IPerson): number{\r\n    // Put your code here\r\n    return p1.age - p2.age;\r\n}\r\n\r\nexport const SortFuncStartFlag: string = \"function defaultSortingFunc(p1: IPerson, p2: IPerson): number{\\n\";\r\n\r\nexport const DefaultSortFuncAsString: string = `${IPersonInterFaceAsString}\\n\\n ${SortFuncStartFlag}\\t// Put your code here...\\n\\treturn p1.age - p2.age;\\n}`;","import * as React from \"react\";\r\nimport Editor from \"@monaco-editor/react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport { IPerson } from \"./IPerson\";\r\nimport { SortFuncStartFlag } from \"./SortingDefault\";\r\n\r\nexport class SortCodeEditor extends React.Component<\r\n  SortCodeEditorProps,\r\n  SortCodeEditorState\r\n> {\r\n  constructor(props: SortCodeEditorProps) {\r\n    super(props);\r\n    this.state = {\r\n      darkMode: false,\r\n      unsavedCode: this.props.code,\r\n      editPopoverOpen: false,\r\n    };\r\n  }\r\n\r\n  closePopover = () => {\r\n    this.setState({ editPopoverOpen: false });\r\n  };\r\n\r\n  getCleanCode = (): string => {\r\n    let s: string = this.state.unsavedCode;\r\n\r\n    let i: number = s.indexOf(SortFuncStartFlag);\r\n\r\n    s = s.slice(i + SortFuncStartFlag.length);\r\n    s = s.slice(0, -1);\r\n\r\n    return s;\r\n  };\r\n\r\n  saveAndClose = () => {\r\n    try {\r\n      // update function in parent\r\n      let newFunction: any = new Function(\"p1\", \"p2\", this.getCleanCode());\r\n\r\n      this.props.onSave(this.state.unsavedCode, newFunction);\r\n    } catch (err) {\r\n      console.error(err);\r\n      this.props.showError();\r\n    }\r\n\r\n    this.closePopover();\r\n  };\r\n\r\n  cancelAndClose = () => {\r\n    // delete changes\r\n    this.setState({ unsavedCode: this.props.code });\r\n    this.closePopover();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Button\r\n          variant=\"primary\"\r\n          onClick={() => this.setState({ editPopoverOpen: true })}\r\n        >\r\n          {this.props.buttonName}\r\n        </Button>\r\n        {this.state.editPopoverOpen && (\r\n          <Modal\r\n            size=\"xl\"\r\n            show={true}\r\n            onHide={this.closePopover}\r\n            dialogClassName=\"Popover\"\r\n          >\r\n            <Modal.Header>\r\n              <Modal.Title>{this.props.buttonName}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <Editor\r\n                height=\"400px\"\r\n                defaultLanguage=\"typescript\"\r\n                theme={this.state.darkMode ? \"vs-dark\" : \"light\"}\r\n                defaultValue={this.props.code}\r\n                onChange={(newVal: string | undefined) => {\r\n                  this.setState({ unsavedCode: newVal || \"\" });\r\n                }}\r\n              />\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button\r\n                variant=\"primary\"\r\n                onClick={this.saveAndClose}\r\n                disabled={this.props.code === this.state.unsavedCode}\r\n              >\r\n                Save\r\n              </Button>\r\n              <Button variant=\"danger\" onClick={this.cancelAndClose}>\r\n                Cancel\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport interface SortCodeEditorProps {\r\n  buttonName: string;\r\n  code: string;\r\n  onSave: (newCode: string, f: (p1: IPerson, p2: IPerson) => number) => void;\r\n  showError: () => void;\r\n}\r\n\r\nexport interface SortCodeEditorState {\r\n  darkMode: boolean;\r\n  unsavedCode: string;\r\n  editPopoverOpen: boolean;\r\n}\r\n","import * as React from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { IPerson } from \"./IPerson\";\r\nimport data from \"./randomData.json\";\r\n\r\nexport class InfoTable extends React.Component<InfoTableProps, InfoTableState> {\r\n  constructor(props: InfoTableProps) {\r\n    super(props);\r\n    this.state = {\r\n      currentList: data,\r\n    };\r\n  }\r\n\r\n  getFilteredList = (): IPerson[] => {\r\n    return data.filter(this.props.filterFunc);\r\n  };\r\n\r\n  getSortedList = (): IPerson[] => {\r\n    return data.filter(this.props.filterFunc);\r\n  };\r\n\r\n  render() {\r\n    // List starts off full and in random order\r\n    let myList: IPerson[] = data;\r\n\r\n    // Try to use user provided function to filter list\r\n    try {\r\n      myList = this.getFilteredList();\r\n    } catch (err) {\r\n      console.error(err);\r\n      this.props.showFilterError();\r\n    }\r\n\r\n    // Try to use user provided function to sort list\r\n    try {\r\n      myList = myList.sort(this.props.sorterFunc);\r\n    } catch (err) {\r\n      console.error(err);\r\n      this.props.showSortError();\r\n    }\r\n\r\n    return (\r\n      <Table striped bordered hover variant=\"dark\">\r\n        <thead>\r\n          <tr>\r\n            <th>id</th>\r\n            <th>active</th>\r\n            <th>balance</th>\r\n            <th>age</th>\r\n            <th>eye color</th>\r\n            <th>name</th>\r\n            <th>gender</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {myList.map((person: IPerson) => {\r\n            return (\r\n              <tr key={person._id}>\r\n                <td>{person._id}</td>\r\n                <td>{person.isActive ? \"yes\" : \"no\"}</td>\r\n                <td>{person.balance}</td>\r\n                <td>{person.age}</td>\r\n                <td>{person.eyeColor}</td>\r\n                <td>{person.name}</td>\r\n                <td>{person.gender}</td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\nexport interface InfoTableProps {\r\n  filterFunc: (person: IPerson) => boolean;\r\n  sorterFunc: (p1: IPerson, p2: IPerson) => number;\r\n  showFilterError: () => void;\r\n  showSortError: () => void;\r\n}\r\nexport interface InfoTableState {\r\n  currentList: IPerson[];\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { FilterCodeEditor } from \"./FilterCodeEditor\";\nimport { SortCodeEditor } from \"./SortFuncCodeEditor\";\nimport { InfoTable } from \"./InfoTable\";\n\nimport defaultFilter, { DefaultFilterCodeAsString } from \"./FilterDefaultValue\";\nimport defaultSortingFunc, { DefaultSortFuncAsString } from \"./SortingDefault\";\nimport { IPerson } from \"./IPerson\";\n\nexport default class App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      filterFunc: defaultFilter,\n      sortingFunc: defaultSortingFunc,\n      savedFilterCode: DefaultFilterCodeAsString,\n      savedSortingCode: DefaultSortFuncAsString,\n    };\n  }\n\n  onSaveFilterCode = (\n    newCode: string,\n    filterFunc: (person: IPerson) => boolean\n  ) => {\n    this.setState({ savedFilterCode: newCode, filterFunc: filterFunc });\n\n    this.forceUpdate();\n  };\n\n  showFilterError = () => {\n    alert(\"filter error\");\n  };\n\n  showSortError = () => {\n    alert(\"sort error\");\n  };\n\n  onSaveSortingCode = (\n    newCode: string,\n    sortingFunc: (p1: IPerson, p2: IPerson) => number\n  ) => {\n    this.setState({ savedSortingCode: newCode, sortingFunc: sortingFunc });\n\n    this.forceUpdate();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>user freedom</h1>\n        <h4>for sorting and filtering items</h4>\n\n        <FilterCodeEditor\n          code={this.state.savedFilterCode}\n          onSave={this.onSaveFilterCode}\n          buttonName=\"Edit filter\"\n          showError={this.showFilterError}\n        ></FilterCodeEditor>\n\n        <SortCodeEditor\n          code={this.state.savedSortingCode}\n          onSave={this.onSaveSortingCode}\n          buttonName=\"Edit sort order\"\n          showError={this.showSortError}\n        ></SortCodeEditor>\n\n        <InfoTable\n          filterFunc={this.state.filterFunc}\n          sorterFunc={this.state.sortingFunc}\n          showFilterError={this.showFilterError}\n          showSortError={this.showSortError}\n        />\n      </div>\n    );\n  }\n}\n\nexport interface AppProps {}\nexport interface AppState {\n  filterFunc: (person: IPerson) => boolean;\n  sortingFunc: (p1: IPerson, p2: IPerson) => number;\n  savedFilterCode: string;\n  savedSortingCode: string;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}